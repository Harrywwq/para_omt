; 
(set-info :status unknown)
(declare-fun node_0x7ffff3d258f0 () (_ BitVec 1))
(declare-fun carg_node_0x7ffff3d255f0 () (_ BitVec 32))
(declare-fun StMem_0x7ffff3d28ef0 () (_ BitVec 32))
(declare-fun islt_0x7ffff3d2b080 () (_ BitVec 1))
(declare-fun node_0x7ffff3d2aba0 () (_ BitVec 64))
(declare-fun sext_0x7ffff3d2ad40 () (_ BitVec 64))
(declare-fun node_0x7ffff3d2a7f0 () (_ BitVec 32))
(declare-fun mul_0x7ffff3d2a970 () (_ BitVec 32))
(declare-fun LdMem_0x7ffff3d2a520 () (_ BitVec 32))
(declare-fun node_0x7ffff3d2a2b0 () (_ BitVec 32))
(declare-fun parg_node_0x117d96d0 () (_ BitVec 32))
(declare-fun StMem_0x7e29040 () (_ BitVec 32))
(declare-fun R0x7ffff3cae2b0 () (_ BitVec 1))
(declare-fun node_0x7ffff3d29810 () (_ BitVec 32))
(declare-fun mul_0x7ffff3d29990 () (_ BitVec 32))
(declare-fun LdMem_0x7ffff3d29540 () (_ BitVec 32))
(declare-fun node_0x7ffff3d293c0 () (_ BitVec 32))
(declare-fun parg_node_0x7e28ea0 () (_ BitVec 32))
(declare-fun StMem_0x7e28d90 () (_ BitVec 32))
(declare-fun node_0x7ffff3d28990 () (_ BitVec 32))
(declare-fun LdMem_0x7ffff3d28b10 () (_ BitVec 32))
(declare-fun parg_node_0x7e28bf0 () (_ BitVec 32))
(declare-fun StMem_0x76ee030 () (_ BitVec 32))
(declare-fun node_0x7ffff3d25d80 () (_ BitVec 1))
(declare-fun R0x7ea1410 () (_ BitVec 1))
(declare-fun parg_node_0x117d9e30 () (_ BitVec 32))
(declare-fun StMem_0x117d9d20 () (_ BitVec 32))
(declare-fun LdMem_0x117d9be0 () (_ BitVec 32))
(declare-fun R0x7ffff3d27b90 () (_ BitVec 1))
(declare-fun R0x7ffff3d26b30 () (_ BitVec 1))
(declare-fun and_0x7ea1c20 () (_ BitVec 1))
(declare-fun R0x7ea18d0 () (_ BitVec 1))
(declare-fun and_0x7ea16c0 () (_ BitVec 1))
(declare-fun R0x7ffff3d25b10 () (_ BitVec 1))
(declare-fun or_0x7ffff3d27e60 () (_ BitVec 1))
(declare-fun R0x7ffff3d27590 () (_ BitVec 1))
(declare-fun xor_0x7ffff3d26d40 () (_ BitVec 1))
(declare-fun and_0x7ffff3d27910 () (_ BitVec 1))
(declare-fun R0x7ffff3d27080 () (_ BitVec 1))
(declare-fun xor_0x7ffff3d272c0 () (_ BitVec 1))
(declare-fun islt_0x7ffff3d2f1b0 () (_ BitVec 1))
(declare-fun node_0x7ffff3d2eaf0 () (_ BitVec 64))
(declare-fun sext_0x7ffff3d2ee70 () (_ BitVec 64))
(declare-fun node_0x7ffff3d2e740 () (_ BitVec 32))
(declare-fun mul_0x7ffff3d2e8c0 () (_ BitVec 32))
(declare-fun node_0x7ffff3d2e2f0 () (_ BitVec 32))
(declare-fun node_0x7ffff3d2d9d0 () (_ BitVec 32))
(declare-fun mul_0x7ffff3d2db50 () (_ BitVec 32))
(declare-fun node_0x7ffff3d2d580 () (_ BitVec 32))
(declare-fun node_0x7ffff3d2cc10 () (_ BitVec 32))
(declare-fun node_0x117d9a40 () (_ BitVec 32))
(assert
 (= node_0x7ffff3d258f0 (_ bv1 1)))
(assert
 (let (($x134 (= StMem_0x7ffff3d28ef0 carg_node_0x7ffff3d255f0)))
 (let (($x55 (= islt_0x7ffff3d2b080 (ite (bvslt (_ bv0 64) node_0x7ffff3d2aba0) (_ bv1 1) (_ bv0 1)))))
 (let (($x51 (= node_0x7ffff3d2aba0 sext_0x7ffff3d2ad40)))
 (let (($x60 (= sext_0x7ffff3d2ad40 ((_ sign_extend 32) node_0x7ffff3d2a7f0))))
 (let (($x102 (= node_0x7ffff3d2a7f0 mul_0x7ffff3d2a970)))
 (let (($x116 (= node_0x7ffff3d2a2b0 LdMem_0x7ffff3d2a520)))
 (let (($x117 (= LdMem_0x7ffff3d2a520 StMem_0x7e29040)))
 (let (($x69 (= node_0x7ffff3d2a2b0 (_ bv0 32))))
 (let (($x68 (= node_0x7ffff3d29810 (_ bv0 32))))
 (let (($x70 (or $x68 $x69)))
 (let ((?x65 (bvmul node_0x7ffff3d29810 node_0x7ffff3d2a2b0)))
 (let (($x66 (= mul_0x7ffff3d2a970 ?x65)))
 (let (($x73 (and $x66 (or $x70 (and (distinct mul_0x7ffff3d2a970 (_ bv0 32)) true)))))
 (let (($x120 (= node_0x7ffff3d29810 mul_0x7ffff3d29990)))
 (let (($x127 (= node_0x7ffff3d293c0 LdMem_0x7ffff3d29540)))
 (let (($x104 (= LdMem_0x7ffff3d29540 StMem_0x7e28d90)))
 (let (($x81 (= node_0x7ffff3d293c0 (_ bv0 32))))
 (let (($x80 (= node_0x7ffff3d28990 (_ bv0 32))))
 (let (($x82 (or $x80 $x81)))
 (let ((?x78 (bvmul node_0x7ffff3d28990 node_0x7ffff3d293c0)))
 (let (($x85 (and (= mul_0x7ffff3d29990 ?x78) (or $x82 (and (distinct mul_0x7ffff3d29990 (_ bv0 32)) true)))))
 (let (($x90 (= node_0x7ffff3d28990 LdMem_0x7ffff3d28b10)))
 (let (($x89 (= LdMem_0x7ffff3d28b10 StMem_0x76ee030)))
 (and (or (not (= R0x7ffff3cae2b0 (_ bv1 1))) $x89) $x89 (= StMem_0x76ee030 parg_node_0x7e28bf0) $x90 $x85 (or (not (= R0x7ffff3cae2b0 (_ bv1 1))) $x104) $x104 (= StMem_0x7e28d90 parg_node_0x7e28ea0) $x127 $x120 $x73 (or (not (= R0x7ffff3cae2b0 (_ bv1 1))) $x117) $x117 (= StMem_0x7e29040 parg_node_0x117d96d0) $x116 $x102 $x60 $x51 $x55 (= node_0x7ffff3d258f0 islt_0x7ffff3d2b080) $x134)))))))))))))))))))))))))
(assert
 (let (($x49 (= node_0x7ffff3d258f0 (_ bv1 1))))
 (let (($x232 (or (not $x49) (and (not (= node_0x7ffff3d25d80 (_ bv1 1))) $x49))))
 (let (($x211 (= R0x7ea1410 (_ bv1 1))))
 (and $x211 $x232)))))
(assert
 (let (($x227 (= StMem_0x117d9d20 parg_node_0x117d9e30)))
 (let (($x223 (= LdMem_0x117d9be0 StMem_0x117d9d20)))
 (let (($x213 (= LdMem_0x117d9be0 StMem_0x7ffff3d28ef0)))
 (let (($x219 (= and_0x7ea1c20 (bvand R0x7ffff3d26b30 R0x7ffff3d27b90))))
 (let (($x150 (= and_0x7ea16c0 (bvand R0x7ffff3d25b10 R0x7ffff3d27b90))))
 (let (($x157 (= or_0x7ffff3d27e60 (bvor R0x7ffff3d26b30 R0x7ffff3d27590))))
 (let (($x161 (= xor_0x7ffff3d26d40 (bvxor node_0x7ffff3d258f0 (_ bv1 1)))))
 (let (($x166 (= and_0x7ffff3d27910 (bvand R0x7ffff3d25b10 R0x7ffff3d27080))))
 (let (($x171 (= xor_0x7ffff3d272c0 (bvxor node_0x7ffff3d25d80 (_ bv1 1)))))
 (let (($x178 (= islt_0x7ffff3d2f1b0 (ite (bvslt (_ bv1 64) node_0x7ffff3d2eaf0) (_ bv1 1) (_ bv0 1)))))
 (let (($x180 (= node_0x7ffff3d2eaf0 sext_0x7ffff3d2ee70)))
 (let (($x183 (= sext_0x7ffff3d2ee70 ((_ sign_extend 32) node_0x7ffff3d2e740))))
 (let (($x185 (= node_0x7ffff3d2e740 mul_0x7ffff3d2e8c0)))
 (let (($x194 (or (or (= node_0x7ffff3d2d9d0 (_ bv0 32)) (= node_0x7ffff3d2e2f0 (_ bv0 32))) (and (distinct mul_0x7ffff3d2e8c0 (_ bv0 32)) true))))
 (let (($x189 (= mul_0x7ffff3d2e8c0 (bvmul node_0x7ffff3d2d9d0 node_0x7ffff3d2e2f0))))
 (let (($x195 (and $x189 $x194)))
 (let (($x197 (= node_0x7ffff3d2d9d0 mul_0x7ffff3d2db50)))
 (let (($x206 (or (or (= node_0x7ffff3d2cc10 (_ bv0 32)) (= node_0x7ffff3d2d580 (_ bv0 32))) (and (distinct mul_0x7ffff3d2db50 (_ bv0 32)) true))))
 (let (($x201 (= mul_0x7ffff3d2db50 (bvmul node_0x7ffff3d2cc10 node_0x7ffff3d2d580))))
 (let (($x207 (and $x201 $x206)))
 (and $x207 (= node_0x7ffff3d2cc10 LdMem_0x7ffff3d28b10) (= node_0x7ffff3d2d580 LdMem_0x7ffff3d29540) $x197 $x195 (= node_0x7ffff3d2e2f0 LdMem_0x7ffff3d2a520) $x185 $x183 $x180 $x178 (= node_0x7ffff3d25d80 islt_0x7ffff3d2f1b0) $x171 (= R0x7ffff3d27080 xor_0x7ffff3d272c0) $x166 (= R0x7ffff3d27590 and_0x7ffff3d27910) (= R0x7ffff3d26b30 xor_0x7ffff3d26d40) $x161 $x157 (= R0x7ffff3d27b90 or_0x7ffff3d27e60) $x150 (= R0x7ffff3d25b10 node_0x7ffff3d258f0) (= R0x7ea1410 and_0x7ea16c0) (or (not (= R0x7ea1410 (_ bv1 1))) $x213) (or (not (= R0x7ea18d0 (_ bv1 1))) $x223) (= R0x7ea18d0 and_0x7ea1c20) $x219 (or $x213 $x223) $x227))))))))))))))))))))))
(assert
 (let (($x270 (= node_0x117d9a40 LdMem_0x117d9be0)))
 (let (($x49 (= node_0x7ffff3d258f0 (_ bv1 1))))
 (let (($x232 (or (not $x49) (and (not (= node_0x7ffff3d25d80 (_ bv1 1))) $x49))))
 (and (or (not $x232) $x270) $x270)))))
(assert
 (let (($x49 (= node_0x7ffff3d258f0 (_ bv1 1))))
 (or (not $x49) (and (not (= node_0x7ffff3d25d80 (_ bv1 1))) $x49))))
(assert
 (and (distinct node_0x117d9a40 (_ bv0 32)) true))
(maximize and_0x7ffff3d27910)
(minimize node_0x7ffff3d258f0)
(maximize mul_0x7ffff3d2db50)
(maximize node_0x7ffff3d2a7f0)
(minimize R0x7ffff3d25b10)
(maximize node_0x7ffff3d2cc10)
(minimize or_0x7ffff3d27e60)
(minimize R0x7ffff3d26b30)
(maximize node_0x7ffff3d293c0)
(minimize StMem_0x7ffff3d28ef0)
(minimize node_0x7ffff3d2aba0)
(maximize R0x7ffff3d27590)
(maximize StMem_0x7e28d90)
(minimize node_0x7ffff3d29810)
(minimize parg_node_0x7e28bf0)
(maximize node_0x7ffff3d2d580)
(minimize parg_node_0x7e28ea0)
(maximize LdMem_0x7ffff3d28b10)
(minimize LdMem_0x117d9be0)
(minimize LdMem_0x7ffff3d28b10)
(minimize islt_0x7ffff3d2b080)
(maximize xor_0x7ffff3d272c0)
(maximize StMem_0x7ffff3d28ef0)
(maximize parg_node_0x117d9e30)
(maximize sext_0x7ffff3d2ad40)
(minimize node_0x7ffff3d2d580)
(minimize R0x7ffff3cae2b0)
(maximize or_0x7ffff3d27e60)
(maximize node_0x7ffff3d258f0)
(maximize and_0x7ea1c20)
(minimize islt_0x7ffff3d2f1b0)
(minimize mul_0x7ffff3d29990)
(minimize R0x7ea1410)
(maximize node_0x7ffff3d2e740)
(maximize R0x7ffff3d25b10)
(minimize R0x7ffff3d27590)
(maximize StMem_0x7e29040)
(maximize mul_0x7ffff3d2e8c0)
(minimize mul_0x7ffff3d2e8c0)
(maximize islt_0x7ffff3d2f1b0)
(maximize mul_0x7ffff3d2a970)
(maximize StMem_0x117d9d20)
(minimize carg_node_0x7ffff3d255f0)
(minimize node_0x7ffff3d28990)
(minimize parg_node_0x117d9e30)
(maximize and_0x7ea16c0)
(maximize node_0x7ffff3d2e2f0)
(minimize parg_node_0x117d96d0)
(maximize R0x7ffff3cae2b0)
(maximize xor_0x7ffff3d26d40)
(maximize R0x7ffff3d27080)
(maximize R0x7ffff3d27b90)
(maximize LdMem_0x7ffff3d29540)
(maximize node_0x7ffff3d2d9d0)
(maximize node_0x7ffff3d25d80)
(maximize node_0x7ffff3d29810)
(maximize LdMem_0x7ffff3d2a520)
(minimize and_0x7ffff3d27910)
(minimize node_0x7ffff3d2a2b0)
(maximize parg_node_0x7e28bf0)
(minimize R0x7ffff3d27b90)
(maximize sext_0x7ffff3d2ee70)
(minimize node_0x7ffff3d2e2f0)
(maximize node_0x7ffff3d2aba0)
(check-sat)
(get-objectives)
