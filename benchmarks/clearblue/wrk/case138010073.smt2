; 
(set-info :status unknown)
(declare-fun node_0x7fffdefb34f0 () (_ BitVec 1))
(declare-fun carg_node_0x7fffdefb2270 () (_ BitVec 32))
(declare-fun sub_0x7fffdefb3b60 () (_ BitVec 32))
(declare-fun node_0x7fffdefb39e0 () (_ BitVec 32))
(declare-fun select_0x7fffdefb4040 () (_ BitVec 32))
(declare-fun islt_0x7fffdefb3670 () (_ BitVec 1))
(declare-fun node_0x7fffdefb3d90 () (_ BitVec 32))
(declare-fun node_0x7fffdefb4360 () (_ BitVec 32))
(declare-fun sub_0x7fffdefb5ba0 () (_ BitVec 32))
(declare-fun urem_0x7fffdefb4500 () (_ BitVec 32))
(declare-fun node_0x7fffdefb30b0 () (_ BitVec 32))
(declare-fun select_0x7fffdefb3250 () (_ BitVec 32))
(declare-fun carg_node_0x7fffdefb1d40 () (_ BitVec 32))
(declare-fun sub_0x7fffdefb2e80 () (_ BitVec 32))
(declare-fun node_0x7fffdefb2c50 () (_ BitVec 32))
(declare-fun node_0x7fffdefb2770 () (_ BitVec 1))
(declare-fun islt_0x7fffdefb28e0 () (_ BitVec 1))
(declare-fun node_0x7fffdefb5a00 () (_ BitVec 32))
(declare-fun node_0x7fffdefb5540 () (_ BitVec 1))
(declare-fun select_0x7fffdefb5f70 () (_ BitVec 32))
(declare-fun and_0x7fffdefb57d0 () (_ BitVec 1))
(declare-fun node_0x7fffdefb5050 () (_ BitVec 1))
(declare-fun node_0x7fffdefb4780 () (_ BitVec 1))
(declare-fun ine_0x7fffdefb4920 () (_ BitVec 1))
(declare-fun islt_0x7fffdefb51f0 () (_ BitVec 1))
(declare-fun node_0x7fffdefb4ca0 () (_ BitVec 32))
(declare-fun xor_0x7fffdefb4e20 () (_ BitVec 32))
(declare-fun node_0x7fffdefb5dd0 () (_ BitVec 32))
(declare-fun node_0x7fffdefb65c0 () (_ BitVec 1))
(declare-fun sub_0x7fffdefb6c20 () (_ BitVec 32))
(declare-fun node_0x7fffdefb6ab0 () (_ BitVec 32))
(declare-fun select_0x7fffdefb6ff0 () (_ BitVec 32))
(declare-fun islt_0x7fffdefb6760 () (_ BitVec 1))
(declare-fun node_0x7fffdefb6210 () (_ BitVec 32))
(declare-fun xor_0x7fffdefb6390 () (_ BitVec 32))
(declare-fun node_0x7fffdefb6e50 () (_ BitVec 32))
(declare-fun return_node_0x7fffdefb23d0 () (_ BitVec 32))
(assert
 (= node_0x7fffdefb34f0 (_ bv0 1)))
(assert
 (let (($x52 (= sub_0x7fffdefb3b60 (bvsub (_ bv0 32) carg_node_0x7fffdefb2270))))
 (let (($x50 (= node_0x7fffdefb39e0 sub_0x7fffdefb3b60)))
 (let ((?x56 (ite (= node_0x7fffdefb34f0 (_ bv1 1)) node_0x7fffdefb39e0 carg_node_0x7fffdefb2270)))
 (let (($x57 (= select_0x7fffdefb4040 ?x56)))
 (let (($x62 (= islt_0x7fffdefb3670 (ite (bvslt carg_node_0x7fffdefb2270 (_ bv0 32)) (_ bv1 1) (_ bv0 1)))))
 (and (= node_0x7fffdefb34f0 islt_0x7fffdefb3670) $x62 $x57 $x50 $x52)))))))
(assert
 (= node_0x7fffdefb3d90 select_0x7fffdefb4040))
(assert
 (let (($x73 (= sub_0x7fffdefb5ba0 (bvsub node_0x7fffdefb4360 node_0x7fffdefb3d90))))
 (let (($x103 (= node_0x7fffdefb4360 urem_0x7fffdefb4500)))
 (let (($x77 (= urem_0x7fffdefb4500 (bvurem node_0x7fffdefb30b0 node_0x7fffdefb3d90))))
 (let (($x123 (= node_0x7fffdefb30b0 select_0x7fffdefb3250)))
 (let (($x30 (= sub_0x7fffdefb2e80 (bvsub (_ bv0 32) carg_node_0x7fffdefb1d40))))
 (let (($x9091 (= node_0x7fffdefb2c50 sub_0x7fffdefb2e80)))
 (let (($x40 (= node_0x7fffdefb2770 (_ bv1 1))))
 (let (($x42 (= select_0x7fffdefb3250 (ite $x40 node_0x7fffdefb2c50 carg_node_0x7fffdefb1d40))))
 (let (($x47 (= islt_0x7fffdefb28e0 (ite (bvslt carg_node_0x7fffdefb1d40 (_ bv0 32)) (_ bv1 1) (_ bv0 1)))))
 (let (($x138 (= node_0x7fffdefb2770 islt_0x7fffdefb28e0)))
 (and $x138 $x47 $x42 $x9091 $x30 $x123 $x77 $x103 $x73))))))))))))
(assert
 (= node_0x7fffdefb5a00 sub_0x7fffdefb5ba0))
(assert
 (= node_0x7fffdefb5540 (_ bv1 1)))
(assert
 (let (($x99 (= node_0x7fffdefb5540 (_ bv1 1))))
 (let (($x101 (= select_0x7fffdefb5f70 (ite $x99 node_0x7fffdefb5a00 node_0x7fffdefb4360))))
 (let (($x107 (= and_0x7fffdefb57d0 (bvand node_0x7fffdefb4780 node_0x7fffdefb5050))))
 (let (($x112 (= ine_0x7fffdefb4920 (ite (and (distinct node_0x7fffdefb4360 (_ bv0 32)) true) (_ bv1 1) (_ bv0 1)))))
 (let (($x9072 (= node_0x7fffdefb4780 ine_0x7fffdefb4920)))
 (let (($x9082 (= node_0x7fffdefb5050 islt_0x7fffdefb51f0)))
 (let (($x118 (= islt_0x7fffdefb51f0 (ite (bvslt node_0x7fffdefb4ca0 (_ bv0 32)) (_ bv1 1) (_ bv0 1)))))
 (let ((?x121 (bvxor carg_node_0x7fffdefb1d40 carg_node_0x7fffdefb2270)))
 (let (($x122 (= xor_0x7fffdefb4e20 ?x121)))
 (let (($x83 (= node_0x7fffdefb4ca0 xor_0x7fffdefb4e20)))
 (and $x83 $x122 $x118 $x9082 $x9072 $x112 $x107 (= node_0x7fffdefb5540 and_0x7fffdefb57d0) $x101))))))))))))
(assert
 (= node_0x7fffdefb5dd0 select_0x7fffdefb5f70))
(assert
 (= node_0x7fffdefb65c0 (_ bv0 1)))
(assert
 (let (($x9060 (= sub_0x7fffdefb6c20 (bvsub (_ bv0 32) node_0x7fffdefb5dd0))))
 (let (($x8961 (= node_0x7fffdefb6ab0 sub_0x7fffdefb6c20)))
 (let ((?x9069 (ite (= node_0x7fffdefb65c0 (_ bv1 1)) node_0x7fffdefb6ab0 node_0x7fffdefb5dd0)))
 (let (($x9070 (= select_0x7fffdefb6ff0 ?x9069)))
 (let (($x9076 (= islt_0x7fffdefb6760 (ite (bvslt node_0x7fffdefb6210 (_ bv0 32)) (_ bv1 1) (_ bv0 1)))))
 (let (($x9080 (= xor_0x7fffdefb6390 (bvxor node_0x7fffdefb5dd0 carg_node_0x7fffdefb2270))))
 (let (($x8957 (= node_0x7fffdefb6210 xor_0x7fffdefb6390)))
 (and $x8957 $x9080 $x9076 (= node_0x7fffdefb65c0 islt_0x7fffdefb6760) $x9070 $x8961 $x9060)))))))))
(assert
 (= node_0x7fffdefb6e50 select_0x7fffdefb6ff0))
(assert
 (let (($x8955 (= return_node_0x7fffdefb23d0 node_0x7fffdefb6e50)))
 (and $x8955 $x8955)))
(assert
 (and (distinct return_node_0x7fffdefb23d0 (_ bv0 32)) true))
(maximize select_0x7fffdefb6ff0)
(maximize sub_0x7fffdefb2e80)
(minimize select_0x7fffdefb5f70)
(minimize select_0x7fffdefb4040)
(maximize ine_0x7fffdefb4920)
(minimize node_0x7fffdefb4360)
(minimize islt_0x7fffdefb3670)
(maximize node_0x7fffdefb6e50)
(minimize node_0x7fffdefb2770)
(maximize node_0x7fffdefb4ca0)
(minimize node_0x7fffdefb5a00)
(minimize node_0x7fffdefb5dd0)
(maximize node_0x7fffdefb5050)
(minimize node_0x7fffdefb30b0)
(maximize node_0x7fffdefb4360)
(maximize node_0x7fffdefb5dd0)
(maximize sub_0x7fffdefb6c20)
(maximize sub_0x7fffdefb3b60)
(minimize node_0x7fffdefb6ab0)
(minimize node_0x7fffdefb4780)
(minimize node_0x7fffdefb5050)
(maximize node_0x7fffdefb2770)
(maximize islt_0x7fffdefb51f0)
(maximize node_0x7fffdefb5540)
(minimize node_0x7fffdefb4ca0)
(minimize select_0x7fffdefb6ff0)
(minimize node_0x7fffdefb34f0)
(maximize islt_0x7fffdefb6760)
(minimize islt_0x7fffdefb28e0)
(minimize ine_0x7fffdefb4920)
(maximize islt_0x7fffdefb28e0)
(minimize xor_0x7fffdefb4e20)
(maximize node_0x7fffdefb34f0)
(maximize node_0x7fffdefb5a00)
(maximize node_0x7fffdefb6210)
(maximize sub_0x7fffdefb5ba0)
(maximize node_0x7fffdefb30b0)
(minimize node_0x7fffdefb5540)
(minimize node_0x7fffdefb39e0)
(maximize node_0x7fffdefb4780)
(maximize and_0x7fffdefb57d0)
(maximize select_0x7fffdefb4040)
(maximize islt_0x7fffdefb3670)
(minimize carg_node_0x7fffdefb1d40)
(maximize xor_0x7fffdefb6390)
(minimize node_0x7fffdefb65c0)
(maximize xor_0x7fffdefb4e20)
(minimize node_0x7fffdefb6210)
(minimize node_0x7fffdefb6e50)
(minimize carg_node_0x7fffdefb2270)
(minimize node_0x7fffdefb2c50)
(minimize islt_0x7fffdefb51f0)
(minimize urem_0x7fffdefb4500)
(minimize and_0x7fffdefb57d0)
(minimize sub_0x7fffdefb2e80)
(minimize sub_0x7fffdefb6c20)
(maximize node_0x7fffdefb3d90)
(minimize islt_0x7fffdefb6760)
(maximize select_0x7fffdefb5f70)
(maximize carg_node_0x7fffdefb2270)
(minimize return_node_0x7fffdefb23d0)
(maximize node_0x7fffdefb6ab0)
(maximize node_0x7fffdefb39e0)
(minimize xor_0x7fffdefb6390)
(maximize node_0x7fffdefb2c50)
(maximize return_node_0x7fffdefb23d0)
(check-sat)
(get-objectives)
